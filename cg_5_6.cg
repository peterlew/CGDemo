struct output{
	float4 color : COLOR;
};

float2 div(float2 v1, float2 v2)
{
	float d = v2.x * v2.x + v2.y * v2.y;
	return vec2( ( v1.x * v2.x + v1.y * v2.y ) / d,
			    ( v1.y * v2.x - v1.x * v2.y ) / d );
}

float2 func1(float2 p, float2 c)
{
	return float2(p.x * p.x - p.y * p.y + c.x, 2 * p.x * p.y + c.y);
}

float2 func2(float2 p, float2 c)
{
	float2 inr = div(float2(p.x*p.x - p.y*p.y + c.x - 1.0, 2*p.x*p.y + c.y), float2(2*p.x + c.x - 2, 2*p.y + c.y));
	return float2(inr.x*inr.x - inr.y*inr.y, 2*inr.x*inr.y);
}

output main(float4 color : COLOR, float4 position : POSITION, float4 texCoord : TEXCOORD, uniform float zoom, uniform float2 zc, uniform float var1, uniform float var2)
{
	output OUT;
	
	float2 p = zoom * texCoord.xy + zc;
	float2 c = float2(p);
	float2 c0 = float2(0.2499, 0);
	float count = 0.0;
	float eps = 0.1;
	float len;
	float fact = 1.01;
	float inv1 = 1.0 - var1;
	float iter = 25.0;

	while(count < iter)
	{
		len = dot(p,p);
		if(len*inv1 > 25)
			break;
		p = var1*func2(p, c) + inv1*func1(p, c);
		count += 1.0;
	}
	float col = 1.0 - count / iter;
	float col2 = count + 1 - log(log(len)) / log(2.0);
	col2 = 1.0 - col2 / iter;
	len /= 100.0;
	float tAdd = 0.1*(sin(var2) + 0.8);
	OUT.color.g = var1*(p.x)/100.0 + inv1*col2;
	OUT.color.b = var1*(p.y)/100.0 + inv1*col2;
	OUT.color.r = var1*len + inv1*col2;

	return OUT;
}